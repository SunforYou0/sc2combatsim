#add_library(lodepng STATIC lodepng)
add_executable(SC2CombatSim
   main.cpp         ../generated/ProjectConfig.h
   player.cpp       player.h
   bots.cpp         bots.h
   simulator.cpp    simulator.h
   combinator.cpp   combinator.h
   recorder.cpp     recorder.h
   configurator.cpp configurator.h
   util.cpp         util.h
   lodepng.cpp      lodepng.h
   jsoncpp.cpp      json/json.h     json/json-forwards.h
)
add_executable(SC2SquadGen
   squadgen.cpp     ../generated/ProjectConfig.h
   player.cpp       player.h
   bots.cpp         bots.h
   simulator.cpp    simulator.h
   combinator.cpp   combinator.h
   recorder.cpp     recorder.h
   configurator.cpp configurator.h
   util.cpp         util.h
   lodepng.cpp      lodepng.h
   jsoncpp.cpp      json/json.h     json/json-forwards.h
)

#target_link_libraries(SC2CombatSim lodepng)

set(LIBRARY_PATH ${PROJECT_SOURCE_DIR}/lib)
set(LIBRARY_NAMES_REL sc2lib sc2api sc2utils sc2protocol protobuf civetweb) # libprotobuf
set(LIBRARY_NAMES_DEBUG sc2libd sc2apid sc2utilsd sc2protocold protobufd civetweb)

#link_directories(${LIBRARY_PATH})

if (NOT APPLE)
  list(APPEND LIBRARY_NAMES_REL "sc2renderer")
  list(APPEND LIBRARY_NAMES_DEBUG "sc2rendererd")
endif()

foreach (SC2LIB IN LISTS LIBRARY_NAMES_REL)
  find_library(SC2LIB_${SC2LIB}
    NAMES "${SC2LIB}"
    PATHS "${LIBRARY_PATH}" "/opt/local/lib" "/usr/local/lib"
    PATH_SUFFIXES "sc2api"
    NO_DEFAULT_PATH
  )
  if (SC2LIB_${SC2LIB})
    mark_as_advanced(SC2LIB_${SC2LIB})
    #add_library(SC2LIB_${SC2LIB} STATIC IMPORTED)
    list(APPEND LIBRARY_RELS "${SC2LIB_${SC2LIB}}")
    message(STATUS "${SC2LIB_${SC2LIB}}")
  else ()
    message(WARNING "${SC2LIB} not found. Get s2client-api first.")
  endif ()
endforeach()

foreach (SC2LIBD IN LISTS LIBRARY_NAMES_DEBUG)
  find_library(SC2LIBD_${SC2LIBD}
    NAMES "${SC2LIBD}"
    PATHS "${LIBRARY_PATH}" "/opt/local/lib" "/usr/local/lib"
    PATH_SUFFIXES "sc2api"
    NO_DEFAULT_PATH
  )
  if (SC2LIBD_${SC2LIBD})
    mark_as_advanced(SC2LIBD_${SC2LIBD})
    #add_library(SC2LIBD_${SC2LIBD} STATIC IMPORTED)
    list(APPEND LIBRARY_DEBUGS "${SC2LIBD_${SC2LIBD}}")
    message(STATUS "${SC2LIBD_${SC2LIBD}}")
  else ()
    message(WARNING "${SC2LIBD} not found. Get s2client-api first.")
  endif ()
endforeach()

target_link_libraries(SC2CombatSim
  debug "${LIBRARY_DEBUGS}"
  optimized "${LIBRARY_RELS}"
  #general "${LIBRARY_RELS}"
)

target_link_libraries(SC2SquadGen
  debug "${LIBRARY_DEBUGS}"
  optimized "${LIBRARY_RELS}"
  #general "${LIBRARY_RELS}"
)

set_property(TARGET SC2CombatSim PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
set_property(TARGET SC2SquadGen PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
#set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
#set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded")

if (APPLE)
  target_link_libraries(SC2CombatSim "-framework Carbon")
  target_link_libraries(SC2SquadGen "-framework Carbon")
endif ()

if (UNIX AND NOT APPLE)
  target_link_libraries(SC2CombatSim pthread dl)
  target_link_libraries(SC2SquadGen pthread dl)
endif ()

# Find main Api headers.
find_path(SC2Api_INCLUDE_DIR
    NAMES
        "sc2api/sc2_api.h"
        "sc2renderer/sc2_renderer.h"
        "sc2utils/sc2_manage_process.h"
    PATHS
        "${PROJECT_SOURCE_DIR}/include"
        "/opt/local/include"
        "/usr/local/include"
        "/usr/include"
)
message(STATUS "${SC2Api_INCLUDE_DIR}")

# Find autogenerated Protobuf Api headers.
find_path(SC2Api_Proto_INCLUDE_DIR
    NAMES
        "s2clientprotocol/sc2api.pb.h"
    PATHS
        "${PROJECT_SOURCE_DIR}/include"
        "/opt/local/include"
        "/usr/local/include"
        "/usr/include"
)
message(STATUS "${SC2Api_Proto_INCLUDE_DIR}")

# Find Protobuf headers.
find_path(SC2Api_Protobuf_INCLUDE_DIR
    NAMES
        "google/protobuf/stubs/common.h"
    PATHS
        "${PROJECT_SOURCE_DIR}/include"
        "${SC2Api_INCLUDE_DIR}/sc2api"
    NO_DEFAULT_PATH
)
message(STATUS "${SC2Api_Protobuf_INCLUDE_DIR}")

# Put all the headers together.
set(SC2Api_INCLUDE_DIRS
    "${SC2Api_INCLUDE_DIR}"
    "${SC2Api_Proto_INCLUDE_DIR}"
    "${SC2Api_Protobuf_INCLUDE_DIR}"
)
message(STATUS "${SC2Api_INCLUDE_DIRS}")

include_directories(SYSTEM "${SC2Api_INCLUDE_DIRS}")

#target_include_directories(SC2CombatSim PUBLIC ${PROJECT_SOURCE_DIR}/include)
